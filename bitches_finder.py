import os
import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from time import time

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# üîê –¢–í–û–á –î–ê–ù–Ü
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 588956185  # <-- –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

logger.info(f"Bot token loaded: {'Yes' if BOT_TOKEN else 'No'}")
logger.info(f"Admin ID: {ADMIN_ID}")

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states = {}
user_answers = {}
last_message_time = {}

# –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
correct_answers = {
    1: "–î—ñ–≤—á–∏–Ω–∞",
    2: ["18-25", "26-35"],
    3: ["–ì–µ—Ç–µ—Ä–æ", "–ë—ñ—Å–µ–∫—Å—É–∞–ª"],
    4: ["–°–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏", "–†–æ–º–∞–Ω—Ç–∏—á–Ω—ñ –ø–æ–±–∞—á–µ–Ω–Ω—è", "–î—Ä—É–∂–±–∞"],
    5: "–¢–∞–∫",
    6: "–¢–∞–∫",
    7: "–¢–∞–∫",
    8: "–¢–∞–∫",
    9: "–¢–∞–∫",
    10: ["–ü–æ–∑–∏—Ç–∏–≤–Ω–æ", "–ú–∞–ª–æ –∑–Ω–∞–π–æ–º—ñ"],
    11: ["–ü–æ–∑–∏—Ç–∏–≤–Ω–æ", "–ú–∞–ª–æ –∑–Ω–∞–π–æ–º—ñ"],
    12: ["–ü–æ–∑–∏—Ç–∏–≤–Ω–æ", "–ú–∞–ª–æ –∑–Ω–∞–π–æ–º—ñ"],
    13: ["–ü–æ–∑–∏—Ç–∏–≤–Ω–æ", "–ú–∞–ª–æ –∑–Ω–∞–π–æ–º—ñ"],
    14: "–¢–∞–∫"
}

# –ü–∏—Ç–∞–Ω–Ω—è
questions = {
    1: {"text": "–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å:", "options": ["–î—ñ–≤—á–∏–Ω–∞", "–•–ª–æ–ø–µ—Ü—å", "–Ü–Ω—à–µ"]},
    2: {"text": "–í–∞—à –≤—ñ–∫?", "options": ["18-25", "26-35", "–ú–µ–Ω—à–µ 18", "–ë—ñ–ª—å—à–µ 35"]},
    3: {"text": "–í–∞—à–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω–∞ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è?", "options": ["–ì–µ—Ç–µ—Ä–æ", "–ì–æ–º–æ", "–ë—ñ—Å–µ–∫—Å—É–∞–ª", "–Ü–Ω—à–µ"]},
    4: {"text": "–í–∞—à–∞ –º–µ—Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞?", "options": ["–°–µ—Ä–π–æ–∑–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏", "–†–æ–º–∞–Ω—Ç–∏—á–Ω—ñ –ø–æ–±–∞—á–µ–Ω–Ω—è", "–î—Ä—É–∂–±–∞"]},
    5: {"text": "–í–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ —Å–º—ñ—à–Ω—è–≤–æ–∫?", "options": ["–¢–∞–∫", "–ù—ñ"]},
    6: {"text": "–í–∏ –∑—ñ –õ—å–≤–æ–≤—É?", "options": ["–¢–∞–∫", "–ù—ñ"]},
    7: {"text": "–í–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ —Ä–µ–∞–ª—å–Ω–æ—ó –∑—É—Å—Ç—Ä—ñ—á—ñ?", "options": ["–¢–∞–∫", "–ù—ñ"]},
    8: {"text": "–í–∏ –≥–æ—Ç–æ–≤—ñ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ–π –∑—É—Å—Ç—Ä—ñ—á—ñ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ –Ω–µ—Å–º—ñ–ª–∏–≤–∏–º —ñ –º–æ–≤—á–∞–∑–Ω–∏–º —Ö–ª–æ–ø—Ü–µ–º? (–¶–µ —è, –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω —á–∞—Å –Ω–∞ —Ä–æ–∑–∫–∞—á–∫—É)", "options": ["–¢–∞–∫", "–ù—ñ"]},
    9: {"text": "–í–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –ª—é–¥–∏–Ω–æ—é, —è–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –¥–∏–≤–Ω–æ—é?", "options": ["–¢–∞–∫", "–ù—ñ"]},
    10: {"text": "–Ø–∫ –≤–∏ —Å–ø—Ä–∏–π–º–∞—î—Ç–µ –Ω–∞—Å—Ç—ñ–ª—å–Ω—ñ —ñ–≥—Ä–∏?", "options": ["–ü–æ–∑–∏—Ç–∏–≤–Ω–æ", "–ù–µ–≥–∞—Ç–∏–≤–Ω–æ", "–ú–∞–ª–æ –∑–Ω–∞–π–æ–º—ñ"]},
    11: {"text": "–Ø–∫ –≤–∏ —Å—Ç–∞–≤–∏—Ç–µ—Å—å –¥–æ –ù–∞—Å—Ç—ñ–ª—å–Ω–æ-–†–æ–ª—å–æ–≤–∏—Ö –Ü–≥–æ—Ä?", "options": ["–ü–æ–∑–∏—Ç–∏–≤–Ω–æ", "–ù–µ–≥–∞—Ç–∏–≤–Ω–æ", "–ú–∞–ª–æ –∑–Ω–∞–π–æ–º—ñ"]},
    12: {"text": "–Ø–∫ –≤–∏ —Å—Ç–∞–≤–∏—Ç–µ—Å—å –¥–æ –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö —ñ–≥–æ—Ä?", "options": ["–ü–æ–∑–∏—Ç–∏–≤–Ω–æ", "–ù–µ–≥–∞—Ç–∏–≤–Ω–æ", "–ú–∞–ª–æ –∑–Ω–∞–π–æ–º—ñ"]},
    13: {"text": "–Ø–∫ –≤–∏ —Å—Ç–∞–≤–∏—Ç–µ—Å—å –¥–æ –∞–Ω—ñ–º–µ?", "options": ["–ü–æ–∑–∏—Ç–∏–≤–Ω–æ", "–ù–µ–≥–∞—Ç–∏–≤–Ω–æ", "–ú–∞–ª–æ –∑–Ω–∞–π–æ–º—ñ"]},
    14: {"text": "–ß–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –¥–æ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞ –∑ –≤–∏—â–µ–∑–Ω–∞—á–µ–Ω–∏–º–∏ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏, —è–∫—â–æ —â–µ –Ω–µ –∑–Ω–∞–π–æ–º—ñ?", "options": ["–¢–∞–∫", "–ù—ñ"]},
    15: {"text": "–ù–∞–ø–∏—à—ñ—Ç—å –∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –ø—Ä–æ —Å–µ–±–µ, —â–æ–± —è –º—ñ–≥ –∫—Ä–∞—â–µ –≤–∞—Å –∑—Ä–æ–∑—É–º—ñ—Ç–∏:", "options": None}
}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        logger.info(f"User {user_id} started the bot")
        
        now = time()
        if user_id in last_message_time and now - last_message_time[user_id] < 0.3:
            return
        last_message_time[user_id] = now

        chat_id = update.effective_chat.id
        user_states[chat_id] = 1
        user_answers[chat_id] = {}

        reply_markup = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton("/start")],
                [KeyboardButton("/help"), KeyboardButton("/about")]
            ],
            resize_keyboard=True
        )

        await context.bot.send_message(
            chat_id=chat_id,
            text="–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Bitches Finder\n–ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø–æ—á–∞—Ç–∏!",
            reply_markup=reply_markup
        )
        await send_question(chat_id, context, question_number=1)
        logger.info(f"Successfully sent start message to user {user_id}")
    except Exception as e:
        logger.error(f"Error in start command: {e}")

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"User {update.effective_user.id} requested help")
        await update.message.reply_text("–Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É —Å—É–º—ñ—Å–Ω–æ—ó –¥—ñ–≤—á–∏–Ω–∏. –ü–æ—á–Ω–∏ –∑ /start")
    except Exception as e:
        logger.error(f"Error in help command: {e}")

# /about
async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"User {update.effective_user.id} requested about")
        await update.message.reply_text("Bitches Finder ‚Äî –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π Telegram-–±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É –∞–ª—å—Ç—É—à–∫–∏ –≤–ª–∞—Å–Ω–∏–∫—É –±–æ—Ç–∞.")
    except Exception as e:
        logger.error(f"Error in about command: {e}")

# –ö–æ–º–∞–Ω–¥–∏ –º–µ–Ω—é
async def setup_commands(app):
    try:
        await app.bot.set_my_commands([
            BotCommand("start", "–ü–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è"),
            BotCommand("help", "–î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"),
            BotCommand("about", "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞")
        ])
        logger.info("Bot commands set successfully")
    except Exception as e:
        logger.error(f"Error setting up commands: {e}")

# –ü–∏—Ç–∞–Ω–Ω—è
async def send_question(chat_id, context, question_number):
    try:
        logger.info(f"Sending question {question_number} to chat {chat_id}")
        q = questions[question_number]
        user_states[chat_id] = question_number

        if chat_id not in user_answers:
            user_answers[chat_id] = {}

        if q["options"]:
            buttons = [
                [InlineKeyboardButton(text=opt, callback_data=f"{question_number}:{opt}")]
                for opt in q["options"]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await context.bot.send_message(chat_id=chat_id, text=q["text"], reply_markup=reply_markup)
        else:
            await context.bot.send_message(chat_id=chat_id, text=q["text"])
        
        logger.info(f"Question {question_number} sent successfully to chat {chat_id}")
    except Exception as e:
        logger.error(f"Error sending question {question_number} to chat {chat_id}: {e}")

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user_id = query.from_user.id
        logger.info(f"User {user_id} clicked button: {query.data}")
        
        now = time()
        if user_id in last_message_time and now - last_message_time[user_id] < 0.3:
            return
        last_message_time[user_id] = now

        await query.answer()
        data = query.data
        q_num_str, answer = data.split(":", 1)
        q_num = int(q_num_str)
        chat_id = query.message.chat_id
        user = query.from_user

        correct = correct_answers.get(q_num, [])
        is_correct = answer in correct if isinstance(correct, list) else answer == correct

        logger.info(f"User {user_id} answered Q{q_num}: {answer}, correct: {is_correct}")

        if is_correct:
            if chat_id not in user_answers:
                user_answers[chat_id] = {}
            user_answers[chat_id][q_num] = answer

            next_q = q_num + 1
            if next_q in questions:
                await send_question(chat_id, context, next_q)
            else:
                await query.edit_message_text("–î—è–∫—É—é –∑–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è! –¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤–ª–∞—Å–Ω–∏–∫—É –±–æ—Ç–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –π–æ–º—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å. –ù—ñ–∫–Ω–µ–π–º: @TrueSifon")

                await context.bot.send_animation(
                    chat_id=chat_id,
                    animation="https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExOXJ4ZmRkMHN0ajhtZm1vYWphOGxwNmFramp3cWhoa2l0NGE5bTczMCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/5jT0jaNDsM6Ik7X9yq/giphy.gif"
                )
        else:
            await query.edit_message_text("–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –Ω–∞–º –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç–µ üòî")
            await context.bot.send_animation(
                chat_id=chat_id,
                animation="https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExeGZneTdjcG40anA4aGhzN2ptaDRvcHI1dWhhdnQxNWlzb2pobGgzdSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/IT6kBZ1k5oEeI/giphy.gif"
            )
    except Exception as e:
        logger.error(f"Error handling callback query: {e}")

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        logger.info(f"User {user_id} sent text message: {update.message.text}")
        
        now = time()
        if user_id in last_message_time and now - last_message_time[user_id] < 0.3:
            return
        last_message_time[user_id] = now

        chat_id = update.effective_chat.id  
        user = update.effective_user
        text = update.message.text
        current_q = user_states.get(chat_id)

        if current_q == 15:
            user_answers[chat_id][15] = text

            answers_text = "\n".join(
                f"Q{q_num}: {questions[q_num]['text']}\n‚û°Ô∏è {user_answers[chat_id].get(q_num, '-')}\n"
                for q_num in sorted(user_answers[chat_id])
            )

            msg = (
                f"‚úÖ –•—Ç–æ—Å—å –ø—Ä–æ–π—à–æ–≤ –±–æ—Ç:\n"
                f"–Ü–º'—è: {user.first_name or ''} {user.last_name or ''}\n"
                f"Username: @{user.username or '‚Äî'}\n"
                f"ID: {user.id}\n\n"
                f"{answers_text}"
            )

            await context.bot.send_message(chat_id=ADMIN_ID, text=msg)
            await update.message.reply_text("–î—è–∫—É—é –∑–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è! –¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤–ª–∞—Å–Ω–∏–∫—É –±–æ—Ç–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –π–æ–º—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å. –ù—ñ–∫–Ω–µ–π–º: @TrueSifon")
            await context.bot.send_animation(
                chat_id=chat_id,
                animation="https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExOXJ4ZmRkMHN0ajhtZm1vYWphOGxwNmFramp3cWhoa2l0NGE5bTczMCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/5jT0jaNDsM6Ik7X9yq/giphy.gif"
            )

            del user_states[chat_id]
            user_answers.pop(chat_id, None)
            logger.info(f"User {user_id} completed the survey")
    except Exception as e:
        logger.error(f"Error handling text message: {e}")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("Starting bot...")
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables!")
        exit(1)
    
    try:
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("about", about_command))
        app.add_handler(CallbackQueryHandler(handle_answer))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏
        app.post_init = setup_commands
        
        logger.info("Bot handlers added, starting polling...")
        print("Connected!")  # –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –≤–∏ –±–∞—á–∏—Ç–µ –≤ –ª–æ–≥–∞—Ö
        
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        exit(1)
